import Head from 'next/head';
import authStyles from '../../styles/auth.module.css';
import { useState, useEffect } from 'react';
import moment from 'moment-timezone';
import Router from 'next/router';
import Link from 'next/link';
import Image from 'next/image';
import logo from '../../../public/svg/logo-auth.svg';

export default function SignUp() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [fullName, setFullName] = useState('');
  const [username, setUsername] = useState('');
  const [timezone, setTimezone] = useState('');

  useEffect(() => {
    if (localStorage.getItem('tasuke-user-jwt') != null) {
      Router.push('/');
    }
  }, []);

  const handleAuth = async (event) => {
    event.preventDefault();

    if (email == '' || password == '') {
      alert('Email and Password cannot be empty!');
    }

    const data = await fetch(
      `${process.env.NEXT_PUBLIC_PROD_API_URL}/api/auth/register`,
      {
        method: 'POST',
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password, fullName, username, timezone }),
      }
    );

    const result = await data.json();

    localStorage.setItem('tasuke-user', JSON.stringify(result.data));

    Router.push('/');
  };

  const focusOutHandler = (e, inputName) => {
    if (e.target.value == '') {
      alert(`${inputName} cannot be empty`);
    }
  };

  return (
    <>
      <Head>
        <title>Tasuke</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <div className={authStyles.container}>
        <div className={authStyles['form-container']}>
          <Image src={logo} alt='app logo' />
          <h1>
            Create an account
          </h1>
          <label htmlFor='full-name'>Full Name:</label>
          <input
            type='text'
            placeholder='Enter your full name...'
            name='fullName'
            onChange={(e) => setFullName(e.target.value)}
            onBlur={(e) => focusOutHandler(e, 'fullName')}
          />
          <label htmlFor='username'>Username:</label>
          <input
            type='text'
            placeholder='Enter your username...'
            name='username'
            onChange={(e) => setUsername(e.target.value)}
            onBlur={(e) => focusOutHandler(e, 'username')}
          />
          <label htmlFor='email'>Email:</label>
          <input
            type='email'
            placeholder='Enter your email...'
            name='email'
            onChange={(e) => setEmail(e.target.value)}
            onBlur={(e) => focusOutHandler(e, 'email')}
          />
          <label htmlFor='timezone'>Choose your timezone:</label>
          <select
            id='timezone'
            name='timezone'
            onChange={(e) => setTimezone(e.target.value)}
            onBlur={(e) => focusOutHandler(e, 'timezone')}
          >
            {moment.tz.names().map((timezone, index) => (
              <option key={index} value={timezone}>
                {timezone}
              </option>
            ))}
          </select>
          <label htmlFor='password'>Password:</label>
          <input
            type='password'
            placeholder='Enter your password...'
            name='password'
            onChange={(e) => setPassword(e.target.value)}
            onBlur={(e) => focusOutHandler(e, 'password')}
          />
          <button onClick={handleAuth} type='submit'>
            Sign up with Email
          </button>
          <p>
            Already signed up?{' '}
            <Link href='/auth/login' className={authStyles.link}>
              Go to login
            </Link>
          </p>
        </div>
      </div>
    </>
  );
}
