import Head from 'next/head';
import { Inter } from 'next/font/google';
import styles from '@/styles/Home.module.css';
import { useEffect, useState } from 'react';

const inter = Inter({ subsets: ['latin'] });

export default function Home() {
  const [tasks, setTasks] = useState([]);
  const [suggestedTask, setSuggestedTask] = useState({});

  useEffect(() => {
    handleSuggestions();
  }, [tasks]);

  const handleSuggestions = () => {
    const pendingTasks = tasks.filter((task) => task.status === 'pending');

    if (pendingTasks.length < 1) {
      setSuggestedTask({});
      return;
    }

    const randomNumber = Math.floor(Math.random() * pendingTasks.length);
    const suggested = pendingTasks[randomNumber];

    setSuggestedTask({ ...suggested });
  };

  const handleAddTask = (event) => {
    event.preventDefault();
    const taskName = event.target.elements.taskName.value;

    if (!taskName) {
      alert('task name cannot be empty');
      return;
    }

    setTasks([
      ...tasks,
      {
        id: Math.floor(Math.random() * 100),
        title: taskName,
        note: '',
        status: 'pending',
      },
    ]);

    event.target.reset();
  };

  const handleAddNote = (event, taskIndex) => {
    event.preventDefault();
    const note = event.target.elements.note.value;
    const task = tasks[taskIndex];

    if (note) {
      const newState = tasks.map((task) => {
        if (task.id == taskIndex) {
          return { ...task, note, status: 'done' };
        }

        return task;
      });

      setTasks(newState);
      event.target.reset();
    }

    console.log(tasks);
  };

  return (
    <>
      <Head>
        <title>Create Task App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className={styles.main}>
        <div className={styles.center}>
          <form onSubmit={handleAddTask}>
            <label htmlFor='taskName'>Add a task:</label>
            <input id='taskName' name='taskName' type='text' />
            <button type='submit'>Add</button>
          </form>
        </div>

        <div>
          <h3>Suggested Task:</h3>
          <div className={styles.grid}>
            <a href='#' className={styles.card}>
              <h2 className={inter.className}>{suggestedTask.title}</h2>
              <p className={inter.className}>{suggestedTask.note}</p>
              <p>Status: {suggestedTask.status}</p>
              <p>id: {suggestedTask.id}</p>

              <br></br>

              <form
                onSubmit={(event) => handleAddNote(event, suggestedTask.id)}
              >
                <label htmlFor='note'>Add a note:</label>
                <input id='note' name='note' type='text' />
                <button type='submit'>Add</button>
              </form>
            </a>
          </div>
        </div>

        <div>
          <h3>Tasks:</h3>
          <div className={styles.grid}>
            {tasks.map((task) => (
              <a href='#' className={styles.card} key={task.id}>
                <h2 className={inter.className}>{task.title}</h2>
                <p className={inter.className}>{task.note}</p>
                <p>Status: {task.status}</p>
              </a>
            ))}
          </div>
        </div>
      </main>
    </>
  );
}
